<?php

class taoDevTools_models_RdfDiff
{

    private $added = array();

    private $removed = array();

    private $toAdd = array();

    private $toRemove = array();

    private $comments;

    public function __construct()
    {
        $this->comments = array(
            "SQL file generated by " . __CLASS__
        );
    }

    public function addRdf($file)
    {
        $this->comments[] = "Added file " . $file;
        $triples = $this->getTriples($file);
        foreach ($triples as $trip) {
            $serial = md5(implode(' ', $trip));
            $this->added[$serial] = true;
            if (! isset($this->removed[$serial])) {
                $this->toAdd[$serial] = $trip;
            } elseif (isset($this->toRemove[$serial])) {
                unset($this->toRemove[$serial]);
            }
        }
    }

    public function removeRdf($file)
    {
        $this->comments[] = "Removed file " . $file;
        $triples = $this->getTriples($file);
        foreach ($triples as $trip) {
            $serial = md5(implode(' ', $trip));
            $this->removed[$serial] = true;
            if (! isset($this->added[$serial])) {
                $this->toRemove[$serial] = $trip;
            } elseif (isset($this->toAdd[$serial])) {
                unset($this->toAdd[$serial]);
            }
        }
    }

    protected function getTriples($file)
    {
        if (! file_exists($file)) {
            throw new Exception($file . ' not found');
        }
        // validate the file to import
        $parser = new tao_models_classes_Parser($file, array(
            'extension' => 'rdf'
        ));
        $parser->validate();
        if (! $parser->isValid()) {
            throw new common_Exception('Invalid RDF file ' . $file);
        }
        
       
        $modelDefinition = new EasyRdf_Graph();
        $modelDefinition->parseFile($file);
        /*
        $graph = $modelDefinition->toRdfPhp();
        $resources = $modelDefinition->resources();
        */
        $format = EasyRdf_Format::getFormat('php');
        $data = $modelDefinition->serialise($format);
        
        $triples = array();
        foreach ($data as $subjectUri => $propertiesValues){
             
            foreach ($propertiesValues as $prop=>$values){
                foreach ($values as $k => $v) {
                    $triples[] = array(
                        's' => $subjectUri,
                        'p' => $prop,
                        'o' => $v['value'],
                        'l' => isset($v['lang']) ? $v['lang'] : '',
                    );
                }
            }
        }

        return $triples;
    }

    public function getDiffCount()
    {
        return count($this->toAdd) + count($this->toRemove);
    }

    public function exportDiffToSql()
    {
        $sql = "";
        foreach ($this->comments as $comment) {
            $sql .= '-- ' . $comment . "\n";
        }
        foreach ($this->toRemove as $line) {
            $sql .= 'DELETE FROM statements WHERE subject = ' . $this->escape($line['s']) . ' AND predicate = ' . $this->escape($line['p']) . ' AND object = ' . $this->escape($line['o']) . ' AND l_language = ' . $this->escape($line['l']) . ";\n";
        }
        $junk = ",DEFAULT,'updateScript','yyy[admin,administrators,authors]','yyy[admin,administrators,authors]','yyy[admin,administrators,authors]','" . date("m/d/y g:i A", time()) . "'";
        $namespaces = common_ext_NamespaceManager::singleton()->getAllNamespaces();
        foreach ($this->toAdd as $line) {
            $nsPrefix = substr($line['s'], 0, strpos($line['s'], '#') + 1);
            $ns = isset($namespaces[$nsPrefix]) ? $namespaces[$nsPrefix]->getModelId() : common_ext_NamespaceManager::singleton()->getLocalNamespace()->getModelId();
            $sql .= 'INSERT INTO statements VALUES (' . $ns . ',' . $this->escape($line['s']) . ',' . $this->escape($line['p']) . ',' . $this->escape($line['o']) . ',' . $this->escape($line['l']) . $junk . ");\n";
        }
        return $sql;
    }

    public function exportDiffToPhp()
    {
        /*
        return "<?php return " . common_Utils::toPHPVariableString(array(
            'comments' => $this->comments,
            'toAdd' => $this->toAdd,
            'toRemove' => $this->toRemove
        )) . ";?>";
        */
        $string = "<?php return array(
            'comments' => ".common_Utils::toPHPVariableString($this->comments).",
            'toAdd' => array(".PHP_EOL;
        foreach ($this->toAdd as $key => $val) {
            $string .= common_Utils::toPHPVariableString($key).' => '.common_Utils::toPHPVariableString($val).','.PHP_EOL;
        }
        $string .= "),".PHP_EOL;
        $string .= "'toRemove' => array(".PHP_EOL;
        foreach ($this->toRemove as $key => $val) {
            $string .= common_Utils::toPHPVariableString($key).' => '.common_Utils::toPHPVariableString($val).','.PHP_EOL;
        }
        $string .= "));";
        return $string;
    }

    public function exportAdditionalsToRdf()
    {
        $exporter = new taoDevTools_models_RdfExport();
        foreach ($this->toAdd as $trip) {
            $exporter->addTriple($data);
        }
        return $exporter->__toString();
    }

    private function escape($string)
    {
        $search = array(
            "\\",
            "\x00",
            "\n",
            "\r",
            "'",
            '"',
            "\x1a"
        );
        $replace = array(
            "\\\\",
            "\\0",
            "\\n",
            "\\r",
            "\'",
            '\"',
            "\\Z"
        );
        
        return '\'' . str_replace($search, $replace, $string) . '\'';
    }
}
